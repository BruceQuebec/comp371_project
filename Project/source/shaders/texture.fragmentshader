#version 330 core


in vec4 shadow_map_pos;
in vec2 uv;
in vec3 normal;

in vec3 light_direction;
in vec3 camera_direction;

in vec3 vertex_pos_worldspace;
in vec3 light_pos_worldspace;
in vec3 camera_pos_worldspace;

out vec4 color;


uniform vec3 ambient;
uniform vec3 diffuse;
uniform vec3 specular;
uniform float shininess;

uniform vec3 light_color;

uniform sampler2D texture_sampler;
uniform sampler2DShadow shadow_map;

uniform bool render_shadow;


void main()
{
	vec4 ambient4 = vec4(ambient.xyz, 1);
	vec4 diffuse4 = vec4(diffuse.xyz, 1);
	vec4 specular4 = vec4(specular.xyz, 1);
	vec4 light_color4 = vec4(light_color.xyz, 1);

	vec3 shadow_pos = shadow_map_pos.xyz/shadow_map_pos.w;

	float bias = max(0.5 * (1.0 - dot(normalize(normal), normalize(light_direction))), 0.05);

	float z = shadow_map_pos.z - bias;

	shadow_pos = vec3(shadow_map_pos.x/shadow_map_pos.w, shadow_map_pos.y/shadow_map_pos.w, z/shadow_map_pos.w);

	shadow_pos = shadow_pos * 0.5 + 0.5;

	vec3 texture_color = vec3(texture(texture_sampler, uv));
	vec4 texture_color4 = texture(texture_sampler, uv);

	vec3 ambient_color = texture_color;
	vec4 ambient_color4 = texture_color4;

	float cos_theta = max(dot(normalize(normal), normalize(light_direction)), 0);
	vec3 diffuse_color = cos_theta * texture_color;
	vec4 diffuse_color4 = cos_theta * texture_color4;

	vec3 reflect_direction = reflect(-normalize(light_direction), normalize(normal));
	float cos_alpha = max(dot(normalize(camera_direction), normalize(reflect_direction)), 0);
	vec3 specular_color = pow(cos_alpha, 1) * texture_color;
	vec4 specular_color4 = pow(cos_alpha, 1) * texture_color4;

	float distance = length(light_pos_worldspace - vertex_pos_worldspace);

	float normalized_distance = max((500 - distance) / 500, 0);


	vec4 tex_color = ambient4 * ambient_color4 + texture(shadow_map, shadow_pos) * light_color4 * diffuse4 * diffuse_color4 + texture(shadow_map, shadow_pos) * light_color4 * specular4 * specular_color4;

	if(tex_color.a < 0.1)
        discard;

	color = tex_color;
}